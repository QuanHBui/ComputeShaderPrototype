#version 430

#define MAX_NUM_COLLIDERS 1024

precision highp float;

layout(local_size_x = MAX_NUM_COLLIDERS) in;

layout(std430, binding = 1) coherent buffer in_sorted_data
{
	vec4 minCoords[MAX_NUM_COLLIDERS];
	vec4 maxCoords[MAX_NUM_COLLIDERS];
};

layout(std430, binding = 2) coherent buffer out_collision_pairs_data
{
	ivec4 collisionPairMisc;
	ivec4 collisionPairs[2 * MAX_NUM_COLLIDERS];
};

layout(binding = 0) uniform atomic_uint nextAvailableIdx;

uniform uint currNumColliders;

subroutine void sweep(uint i, uint j);

subroutine uniform sweep sweepAxis;

subroutine(sweep)
void sweepX(uint i, uint j)
{
	// Check for collision on the x-axis
	if (minCoords[i].x < maxCoords[j].x && maxCoords[i].x > minCoords[j].x)
	{
		uint availableIdx = atomicCounterIncrement(nextAvailableIdx);
		memoryBarrierAtomicCounter();
		collisionPairs[availableIdx].x = int(minCoords[i].w); // w comp stores object ID
		collisionPairs[availableIdx].y = int(minCoords[j].w);
	}
}

subroutine(sweep)
void sweepY(uint i, uint j)
{
	// Look through the previous collision pair buffer
	for (int collisionPairIdx = 0; collisionPairIdx < 2 * currNumColliders; ++collisionPairIdx)
	{
		if (((int(minCoords[i].w) == collisionPairs[collisionPairIdx].x && int(minCoords[j].w) == collisionPairs[collisionPairIdx].y) ||
			 (int(minCoords[j].w) == collisionPairs[collisionPairIdx].x && int(minCoords[i].w) == collisionPairs[collisionPairIdx].y)) &&
			  minCoords[i].y < maxCoords[j].y && maxCoords[i].y > minCoords[j].y)
		{
			uint availableIdx = atomicCounterIncrement(nextAvailableIdx);
			memoryBarrierAtomicCounter();
			collisionPairs[availableIdx].z = int(minCoords[i].w); // w comp stores object ID
			collisionPairs[availableIdx].w = int(minCoords[j].w);

			break;
		}
	}
}

subroutine(sweep)
void sweepZ(uint i, uint j)
{
	for (int collisionPairIdx = 0; collisionPairIdx < 2 * currNumColliders; ++collisionPairIdx)
	{
		if (((int(minCoords[i].w) == collisionPairs[collisionPairIdx].z && int(minCoords[j].w) == collisionPairs[collisionPairIdx].w) ||
			 (int(minCoords[j].w) == collisionPairs[collisionPairIdx].z && int(minCoords[i].w) == collisionPairs[collisionPairIdx].w)) &&
			  minCoords[i].z < maxCoords[j].z && maxCoords[i].z > minCoords[j].z)
		{
			uint availableIdx = atomicCounterIncrement(nextAvailableIdx);
			memoryBarrierAtomicCounter();

			// Sort ID for consistency
			if (minCoords[i].w < minCoords[j].w)
			{
				collisionPairs[availableIdx].x = int(minCoords[j].w); // w comp stores object ID
				collisionPairs[availableIdx].y = int(minCoords[i].w);
			}
			else
			{
				collisionPairs[availableIdx].x = int(minCoords[i].w);
				collisionPairs[availableIdx].y = int(minCoords[j].w);
			}

			break;
		}
	}
}

void main()
{
	// Iterate through each object in AABB list
	uint currObjectIdx = gl_LocalInvocationID.x;

	for (uint nextObjectIdx = currObjectIdx + 1u; nextObjectIdx < currNumColliders; ++nextObjectIdx)
	{
		sweepAxis(currObjectIdx, nextObjectIdx); // Collision pair buffer got updated.
	}

	barrier(); //=============================================================

	// prune();
}
