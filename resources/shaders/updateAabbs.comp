#version 430 core

#define NUM_COLLIDER_VERTS 8u
#define MAX_NUM_COLLIDERS 1024u

// source: https://www.khronos.org/opengl/wiki/Small_Float_Formats
#define NEG_INF_32_BIT_FLOAT -3.4028237e35
#define POS_INF_32_BIT_FLOAT 3.4028237e35

layout(local_size_x = MAX_NUM_COLLIDERS) in;

struct BoxCollider
{
	vec4 vertices[NUM_COLLIDER_VERTS];
};

layout(std430, binding = 0) readonly buffer in_data
{
	BoxCollider boxColliders[];
};

layout(std430, binding = 1) writeonly buffer out_data
{
	vec4 minCoords[MAX_NUM_COLLIDERS];
	vec4 maxCoords[MAX_NUM_COLLIDERS];
};

uniform uint currNumColliders;

void main()
{
	uint colliderIdx = gl_LocalInvocationID.x;

	if (colliderIdx >= currNumColliders)
	{
		minCoords[colliderIdx] = vec4(-1.0f, -1.0f, -1.0f, -2.0f);
		maxCoords[colliderIdx] = vec4(-1.0f, -1.0f, -1.0f, -2.0f);

		return;
	}

	BoxCollider boxCollider = boxColliders[colliderIdx];

	float minX, minY, minZ;
	float maxX, maxY, maxZ;

	minX = minY = minZ = POS_INF_32_BIT_FLOAT;
	maxX = maxY = maxZ = NEG_INF_32_BIT_FLOAT;

	vec3 vertex = vec3(0.0f, 0.0f, 0.0f);

	// Go through all vertices
	for (int i = 0; i < NUM_COLLIDER_VERTS; ++i)
	{
		// Go through each dimension
		vertex = boxCollider.vertices[i].xyz;

		minX = min(minX, vertex.x);
		maxX = max(maxX, vertex.x);

		minY = min(minY, vertex.y);
		maxY = max(maxY, vertex.y);

		minZ = min(minZ, vertex.z);
		maxZ = max(maxZ, vertex.z);
	}

	// Store the results
	minCoords[colliderIdx] = vec4(minX, minY, minZ, colliderIdx); // Store the entity unique ID in the w comp
	maxCoords[colliderIdx] = vec4(maxX, maxY, maxZ, colliderIdx);
}
