#version 430
#extension GL_ARB_shader_storage_buffer_object : require

layout(local_size_x = 8, local_size_y = 1) in;

layout(std430, binding = 0) volatile buffer shader_data
{
	vec4 positionRadius[8];
	vec4 velocityMass[];
};

layout(binding = 2) uniform atomic_uint atomCounter;

uniform float dt;
uniform uint sizeOfBuffer;

vec3 vecProjection(vec3 u, vec3 v)
{
	return dot(u, v) * normalize(v);
}

// Priority would be: trying to unstuck from other sphere -> trying to unstuck from walls
void main() 
{
	// Figure what index pair we are looking at
	uint workGroupID = gl_WorkGroupID.x;
	uint localIndex = gl_LocalInvocationID.x;

	vec4 currPositionRadius = positionRadius[workGroupID];
	vec4 potentialPositionRadius = positionRadius[localIndex];
	
	vec4 currVelocityMass = velocityMass[workGroupID];
	vec4 potentialVelocityMass = velocityMass[localIndex];

	// Collision detection with other spheres
	float combinedRadii = currPositionRadius.w + potentialPositionRadius.w;
	vec3 collision = currPositionRadius.xyz - potentialPositionRadius.xyz;
	if (length(collision) > 0.0f && length(collision) <= combinedRadii)
	{
		// Try to unstick itself first
		if (length(collision) <= combinedRadii * 0.5f) 
		{
			currVelocityMass.xyz = 
		}
		// This is a hit.
		// Find the projection of the momentum of potential sphere onto the collision 
		//  vector pointing from potential sphere to current sphere
		currVelocityMass.xyz += vecProjection(potentialVelocityMass.xyz, collision);
		currVelocityMass.xyz -= 
			vecProjection(velocityMass[workGroupID].xyz, potentialPositionRadius.xyz - currPositionRadius.xyz.xyz);
//
//		potentialVelocityMass.xyz += 
//			vecProjection(velocityMass[workGroupID].xyz, potentialPositionRadius.xyz - positionRadius[workGroupID].xyz);
//		potentialVelocityMass.xyz -= vecProjection(currVelocityMass.xyz, collision);
//
//		velocityMass[localIndex] = potentialVelocityMass;
	}
	else 
	{
		// Hit floor
		if (currPositionRadius.y - currPositionRadius.w < -5.0f)
			currVelocityMass.y = 0.90f * abs(currVelocityMass.y);
		else
			currVelocityMass.y -= 9.81f * dt;
	
		// Left wall
		if (currPositionRadius.x - currPositionRadius.w < -5.0f)
			currVelocityMass.x = 0.90f * abs(currVelocityMass.x);
		// Right wall
		else if (currPositionRadius.x + currPositionRadius.w > 5.0f)
			currVelocityMass.x = -0.90f * abs(currVelocityMass.x);
	
		// Back wall
		if (currPositionRadius.z - currPositionRadius.w < -25.0f)
			currVelocityMass.z = 0.90f * abs(currVelocityMass.z);
		// Front wall
		else if (currPositionRadius.z + currPositionRadius.w > -15.0f)
			currVelocityMass.z = -0.90f * abs(currVelocityMass.z);
	}

	// Sync across all local work groups
	barrier();

	positionRadius[workGroupID].xyz += currVelocityMass.xyz * dt;
	velocityMass[workGroupID].xyz = currVelocityMass.xyz;
}