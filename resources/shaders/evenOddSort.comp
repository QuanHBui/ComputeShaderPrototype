#version 430
#extension GL_ARB_shader_storage_buffer_object : require

#define MAX_NUM_COLLIDERS 1000

layout(local_size_x = MAX_NUM_COLLIDERS) in;

layout(std430, binding = 1) volatile buffer unsorted_data
{
	vec4 minCoords[MAX_NUM_COLLIDERS];
	vec4 maxCoords[MAX_NUM_COLLIDERS];
};

uniform uint currNumColliders;
uniform int evenOrOdd;

void swap(uint, uint);

subroutine void sort(uint i, uint j);

subroutine uniform sort sortComponent;

subroutine(sort)
void sortX(uint i, uint j)
{
	if (minCoords[i].x > minCoords[j].x)
		swap(i, j);

}

subroutine(sort)
void sortY(uint i, uint j)
{
	if (minCoords[i].y > minCoords[j].y)
		swap(i, j);
}

subroutine(sort)
void sortZ(uint i, uint j)
{
	if (minCoords[i].z > minCoords[j].z)
	{
		swap(i, j);
	}
}

void swap(uint i, uint j)
{
	vec4 temp = minCoords[i];
	minCoords[i] = minCoords[j];
	minCoords[j] = temp;

	temp = maxCoords[i];
	maxCoords[i] = maxCoords[j];
	maxCoords[j] = temp;
}

void main()
{
	// Figure what index pair we are looking at
	uint i = gl_LocalInvocationID.x;
	uint j = gl_LocalInvocationID.x + 1;

	// If either index is bigger than the buffer size, we let the compute unit idle
	if (i >= currNumColliders || j >= currNumColliders) return;

	//--------------- Check to see if we are doing odd pair or even pair ---------------//
	// If we are doing odd, the starting index must be even
	if (evenOrOdd == 1 && i % 2 != 0) return;

	// If we are doing even, the starting index must be odd
	if (evenOrOdd == -1 && i % 2 == 0) return;

	//-------------------- The actual sweeping --------------------//
	sortComponent(i, j);
}